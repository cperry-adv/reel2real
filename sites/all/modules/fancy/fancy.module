<?php

/**
 * Implements hook_user_view_alter().
 */
function fancy_user_view_alter(&$build) {
  unset($build['summary']);
}

/**
 * Implements hook_menu().
 */
function fancy_menu() {
  $items['tracks/%node/share'] = array(
    'title arguments' => array(1),
    'title callback' => 'fancy_get_title',
    'page callback' => 'fancy_page',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );

  return $items;
}

function fancy_menu_alter(&$items) {
  $items['node/15']['access callback'] = TRUE;
  $items['node/15']['page callback'] = 'fancy_audio_player_output';
  $items['node/15']['page arguments'] = array(1);
}

/**
 * Page callback for Track pages.
 */
function fancy_audio_player_output($nid) {
  $node = node_load($nid);
  $audio_uri = file_create_url($node->field_audio_file['und'][0]['uri']);
  $canvas_markup = '<canvas id="audioPlayer"></canvas>';
  $audio_markup = '



<canvas id="canvasOne" width="500" height="300"
    style="position: absolute; top: 50px; left: 50px;"  >
 Your browser does not support HTML5 Canvas.
</canvas>



  ';
  $js = '<script src="http://reel-2-real.com/sites/all/libraries/modernizr/modernizr.js"></script>

<script type="text/javascript">
window.addEventListener("load", eventWindowLoaded, false);
var loadCount = 0;
var itemsToLoad = 2;
var buttonSheet;
var audioElement;
var buttonWait = 5;
var timeWaited = buttonWait;

function eventWindowLoaded() {

   audioElement = document.createElement("audio");
   document.body.appendChild(audioElement);
   var audioType = supportedAudioFormat(audioElement);
   if (audioType == "") {
      alert("no audio support");
      return;
   }
   audioElement.addEventListener("canplaythrough",itemLoaded,false);
   audioElement.setAttribute("src", "' . $audio_uri . '");

   buttonSheet = new Image();
   buttonSheet.onload = itemLoaded;
   buttonSheet.src = "http://reel-2-real.com/sites/all/modules/fancy/audiocontrols.png";

}

function supportedAudioFormat(audio) {
   var returnExtension = "";
   if (audio.canPlayType("audio/ogg") =="probably" ||
       audio.canPlayType("audio/ogg") == "maybe") {
         returnExtension = "ogg";
   } else if(audio.canPlayType("audio/wav") =="probably" ||
       audio.canPlayType("audio/wav") == "maybe") {
         returnExtension = "wav";
   } else if(audio.canPlayType("audio/mp3") == "probably" ||
       audio.canPlayType("audio/mp3") == "maybe") {
         returnExtension = "mp3";
   }

   return returnExtension;

}

function canvasSupport () {
    return Modernizr.canvas;
}

function itemLoaded(event) {

   loadCount++;
   if (loadCount >= itemsToLoad) {
      canvasApp();

   }

}

function canvasApp() {

  if (!canvasSupport()) {
          return;
        }

  function  drawScreen () {

      //Background

      context.fillStyle = "#ffffaa";
      context.fillRect(0, 0, theCanvas.width, theCanvas.height);

      //Box
      context.strokeStyle = "#000000";
      context.strokeRect(5,  5, theCanvas.width-10, theCanvas.height-10);

      // Text
      context.fillStyle = "#000000";
      context.fillText  ("Duration:" + audioElement.duration,  20 ,20);
      context.fillText  ("Current time:" + audioElement.currentTime,  250 ,20);
      context.fillText  ("Loop: " + audioElement.loop,  20 ,40);
      context.fillText  ("Autoplay: " +audioElement.autoplay,  250 ,40);
      context.fillText  ("Muted: " + audioElement.muted,  20 ,60);
      context.fillText  ("Controls: " + audioElement.controls,  250 ,60);
      context.fillText  ("Volume: " + audioElement.volume,  20 ,80);
      context.fillText  ("Paused: " + audioElement.paused,  250 ,80);
      context.fillText  ("Ended: " + audioElement.ended,  20 ,100);
      context.fillText  ("Can Play OGG: " + audioElement.canPlayType("audio/ogg"),
                        250 ,100);
      context.fillText  ("Can Play WAV: " + audioElement.canPlayType("audio/wav"),
                        20 ,120);
      context.fillText  ("Can Play MP3: " + audioElement.canPlayType("audio/mp3"),
                        250 ,120);
      context.fillText  ("Source: " + audioElement.currentSrc, 20 ,140);
      context.fillText  ("volumeSliderDrag: " + volumeSliderDrag, 20 ,160);

      //Draw Controls

      //play or pause

      if (audioElement.paused) {
         context.drawImage(buttonSheet, 0,0,bW,bH,playX,playY,bW,bH);//show play

      } else {
         context.drawImage(buttonSheet, 0,32,bW,bH,playX,playY,bW,bH); //show pause

      }

      //loop

      if (audioElement.loop) {
         context.drawImage(buttonSheet, 114,32,bW,bH,loopX,loopY,bW,bH);//show loop
      } else {
         context.drawImage(buttonSheet, 82,32,bW,bH,loopX,loopY,bW,bH); //show no loop
      }

      //play background
      context.drawImage(buttonSheet, 32,0,playBackW,bH,playBackX,playBackY,
         playBackW,bH);

      //vol Background
      context.drawImage(buttonSheet, 32,32,volBackW,bH,volBackX,volBackY,volBackW,bH);

      //play slider
      var slideIncrement = playBackW/audioElement.duration;
      var sliderX = (controlStartX+bW) +
          (slideIncrement*audioElement.currentTime);
      context.drawImage(buttonSheet, 238,0,sliderW,bH,sliderX,
          controlStartY,sliderW,bH);

      //Go back to start
      if (audioElement.ended && !audioElement.loop) {
         audioElement.currentTime = 0;
         audioElement.pause();
      }

      //Volume slider
      //Test Volume Drag

      if (volumeSliderDrag) {
         volumeSliderX = mouseX;
         if (volumeSliderX > volumeSliderEnd) {
            volumeSliderX = volumeSliderEnd;
         }
         if (volumeSliderX < volumeSliderStart) {
            volumeSliderX = volumeSliderStart;
         }
      } else {
         volumeSliderX = volumeSliderStart +
            (audioElement.volume*(volBackW -sliderW));
      }

      context.drawImage(buttonSheet, 238,0,sliderW,bH,volumeSliderX,volumeSliderY,
          sliderW,bH);
      audioElement.volume = (volumeSliderX-volumeSliderStart) * volumeIncrement;
      timeWaited++;

   }

   function eventMouseDown(event) {

      //Hit Volume Slider
      if ( (mouseY >= volumeSliderY) && (mouseY <=volumeSliderY+sliderH) &&
           (mouseX >= volumeSliderX) && (mouseX <= volumeSliderX+sliderW) ) {
         volumeSliderDrag = true;

      }

   }

   function eventMouseMove(event) {
      var x;
      var y;
      if (event.pageX || event.pageY) {
         x = event.pageX;
         y = event.pageY;
      } else {
         x = e.clientX + document.body.scrollLeft +
           document.documentElement.scrollLeft;
         y = e.clientY + document.body.scrollTop +
           document.documentElement.scrollTop;
      }
      x -= theCanvas.offsetLeft;
      y -= theCanvas.offsetTop;

      mouseX=x;
      mouseY=y;
   }

   function eventMouseUp(event) {
      if (timeWaited >= buttonWait) {
         timeWaited = 0;
         //Hit Play
         if ( (mouseY >= playY) && (mouseY <= playY+bH) && (mouseX >= playX) &&
            (mouseX <= playX+bW) ) {
            if (audioElement.paused) {
               audioElement.play();

            } else {
               audioElement.pause();

            }

         }

         //Hit loop
         if ( (mouseY >=loopY) && (mouseY <= loopY+bH) && (mouseX >= loopX) &&
              (mouseX <= loopX+bW) ) {
            if (audioElement.loop) {
               audioElement.loop=false;

            } else {
               audioElement.loop = true;

           }

         }
      }

      if (volumeSliderDrag) {
         volumeSliderDrag = false;
      }

   }

   var theCanvas = document.getElementById("canvasOne");
   var context = theCanvas.getContext("2d");

   var bW = 32;
   var bH = 32;
   var playBackW = 206;
   var volBackW = 50;
   var sliderW = 10;
   var sliderH = 32;
   var controlStartX = 25;
   var controlStartY =200;
   var playX = controlStartX;
   var playY = controlStartY;
   var playBackX = controlStartX+bW;
   var playBackY = controlStartY;
   var volBackX = controlStartX+bW+playBackW;
   var volBackY = controlStartY;
   var loopX = controlStartX+bW+playBackW+volBackW;
   var loopY = controlStartY;
   var mouseX;
   var mouseY;

   theCanvas.addEventListener("mouseup",eventMouseUp, false);
   theCanvas.addEventListener("mousedown",eventMouseDown, false);
   theCanvas.addEventListener("mousemove",eventMouseMove, false);

   audioElement.play();
   audioElement.loop = false;
   audioElement.volume = .5;
   var volumeSliderStart = volBackX;
   var volumeSliderEnd = volumeSliderStart + volBackW -sliderW;
   var volumeSliderX = volumeSliderStart + (audioElement.volume*(volBackW -sliderW));
   var volumeSliderY = controlStartY;
   var volumeSliderDrag = false;
   var volumeIncrement = 1/(volBackW -sliderW);

   function gameLoop() {
              window.setTimeout(gameLoop, 20);
              drawScreen()
         }

   gameLoop();

}

</script>

  ';
  $css = '<style type="text/css">
* { margin:0; padding:0; } /* to remove the top and left whitespace */

html, body { width:100%; height:100%; } /* just to be sure these are full screen*/


</style>';

  print $js . $css . $audio_markup;
die;
}

/**
 * Page callback for Share page.
 */
function fancy_page($node) {
  $form = drupal_get_form('fancy_form');
  return drupal_render($form);
}

/**
 * Title callback for Share page.
 */
function fancy_get_title($node) {
  return 'Share ' . $node->title;
}

/**
 * Implements hook_form().
 */
function fancy_form($form, &$form_state) {
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#size' => '20',
    '#attributes' =>array('placeholder' => t('E-mail address'))
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Share'),
  );
  
  $form['track_nid'] = array(
    '#type' => 'value',
    '#value' => arg(1)
  );
  
  return $form;
}

function fancy_form_validate($form, &$form_state) {
  $valid_email = $form_state['values']['email'];
  if (!valid_email_address($valid_email)) {
  form_set_error('email', 'Sorry. Your email address,' . $valid_email . ', is not valid. Please submit a valid E-mail address.');
  }
}

function fancy_form_submit($form, &$form_state) {
  $valid_email = $form_state['values']['email'];
    $from = 'chris@fancywizard.com';
    $track_nid = $form_state['values']['track_nid'];
    $alias = drupal_get_path_alias('node/' . $track_nid);
    $body = l('Click to view track', $alias, array('absolute' => TRUE));
    $to = $valid_email; // Set this email address - emails will be sent to this email address! 
    $params = array(
    'body' => $body,
    'subject' => 'A track was shared with you on REEL2REEL!!',
    );
 
    if (drupal_mail('fancy', 'some_mail_key', $to, language_default(), $params, $from, TRUE))
    {
        drupal_set_message('Thanks, we will be in contact with more information soon.');     
    } else {
        drupal_set_message('There was an error subscribing you. Please try again later');
    }
}

function fancy_mail($key, &$message, $params) {
  switch ($key) {
//switching on $key lets you create variations of the email based on the $key parameter
    case 'some_mail_key':
      $message['subject'] = $params['subject'];
//the email body is here, inside the $message array
      $message['body'][] = $params['body'];
      break;
  }
}
